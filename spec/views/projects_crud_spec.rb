# Generated by Selenium IDE
require "selenium-webdriver"
require "json"

describe "ProjectCRUD" do
  before(:all) do
    @mail = "admin@todoapp.com"
    @password = "Administrator."
  end

  before(:each) do
    @driver = Selenium::WebDriver.for :firefox
    @vars = {}

    @driver.get("http://localhost:3000/users/sign_in")
    login(@driver, @mail, @password)
    sleep(1)
  end

  after(:each) do
    #@driver.quit
  end

  it "createProject" do
    name = "Test create project name"
    description = "Test create project description"
    create_project(@driver, name, description)
  end

  it "deleteProject" do
    name = "Test delete project name"
    description = "Test delete project description"
    project_index = create_project(@driver, name, description)
    delete_project(@driver, project_index)
  end

  it "editProject" do
    name = "Test edit project name"
    description = "Test edit project description"
    project_index = create_project(@driver, name, description)

    name_edited = "Test edit project name edited"
    description_edited = "Test edit project description edited"
    edit_project(@driver, project_index, name_edited, description_edited)
  end

  it "addTaskToProject" do
    name = "Test add task to project name"
    description = "Test add task to project description"
    create_project(@driver, name, description)

    task_name = "Project task"
    task_description = "Task for project"
    task_deadline = "2021-1-1"
    task_priority = "Low"
    add_task_to_project(@driver, task_name, task_description, task_priority, task_deadline)
  end

  it "deleteTaskFromProject" do
    name = "Test add task to project name"
    description = "Test add task to project description"
    create_project(@driver, name, description)

    task_name = "Project task"
    task_description = "Task for project"
    task_deadline = "2021-1-1"
    task_priority = "Low"
    task_index = add_task_to_project(@driver, task_name, task_description, task_priority, task_deadline)
    delete_task_from_project(@driver, task_index)
  end
end

def create_project(driver, name, description)
  driver.get("http://localhost:3000/")

  existing_projects = driver.all(:xpath, "//a[contains(@id, 'project_link')]").length.to_i
  project_index = (existing_projects + 1).to_s

  # Click on create new project btn
  element = driver.find_element(:id, "btn_create_project").click

  # Fill in new project form and submit it
  driver.find_element(:id, "project_name").click
  driver.find_element(:id, "project_name").send_keys(name)
  driver.find_element(:id, "project_description").click
  driver.find_element(:id, "project_description").send_keys(description)
  driver.find_element(:id, "btn_project_submit").click

  # ASSERT: Check if new project appears in projects list
  sleep(2)
  project_links = driver.find_elements(:id, ("project_link_").concat(project_index))
  expect(project_links.length).to be > 0

  # ASSERT: project link name
  project_link = driver.find_element(:id, "project_link_".concat(project_index))
  expect(project_link.text).to eq(name)

  # Click to project link
  project_link.click
  sleep(2)

  # ASSERT: Check project name in project view
  value_name = driver.find_element(:id, "page_title").text
  expect(value_name).to eq("Task Collection: ".concat(name))

  # ASSERT: Check project description in project view
  value_description = driver.find_element(:id, "lbl_project_description").text
  expect(value_description).to eq(description)

  return project_index
end

def delete_project(driver, project_index)
  # Click on delete project
  driver.find_element(:id, "btn_delete_project").click

  sleep(1)
  driver.switch_to().alert().accept()
  sleep(1)

  # ASSERT: there is one less project
  existing_projects = driver.all(:xpath, "//a[contains(@id, 'project_link')]").length
  expect(existing_projects).to eq((project_index.to_i) - 1)

  # ASSERT: project link is not present
  project_links = driver.find_elements(:id, ("project_link_").concat(project_index))
  expect(project_links.length).to eq(0)
end

def edit_project(driver, project_index, name, description)
  # Click on edit project
  driver.find_element(:id, "btn_edit_project").click

  # Fill in edit project form and submit it
  driver.find_element(:id, "project_name").click
  driver.find_element(:id, "project_name").clear
  driver.find_element(:id, "project_name").send_keys(name)
  driver.find_element(:id, "project_description").click
  driver.find_element(:id, "project_description").clear
  driver.find_element(:id, "project_description").send_keys(description)
  driver.find_element(:id, "btn_project_submit").click

  sleep(2)

  # ASSERT: Check project name
  value_name = driver.find_element(:id, "page_title").text
  expect(value_name).to eq("Task Collection: ".concat(name))

  # ASSERT: Check project description in project view
  value_description = driver.find_element(:id, "lbl_project_description").text
  expect(value_description).to eq(description)
end

def add_task_to_project(driver, name, description, priority, deadline)
  # Get pending tasks
  pending = driver.find_element(:id, "lbl_pending_tasks").text
  expected = (pending.to_i + 1)
  expected_str = expected.to_s

  # Click on add task to project
  driver.find_element(:id, "btn_add_task_project").click

  # Fill in edit task form and submit it
  task_name = driver.find_element(:id, "task_name").click
  driver.find_element(:id, "task_name").clear
  driver.find_element(:id, "task_name").send_keys(name)
  driver.find_element(:id, "task_description").click
  driver.find_element(:id, "task_description").clear
  driver.find_element(:id, "task_description").send_keys(description)
  driver.find_element(:id, "task_priority").click
  dropdown = driver.find_element(:id, "task_priority")
  dropdown.find_element(:xpath, "//option[. = '" + priority + "']").click
  driver.find_element(:id, "task_deadline").send_keys(deadline)
  driver.find_element(:id, "btn_task_submit").click

  sleep(2)

  # ASSERT: check if "pending tasks" card has been updated
  sleep(2)
  expect(driver.find_element(:id, "lbl_pending_tasks").text).to eq (expected_str)

  # ASSERT: check if a new task item has been added to tasks list
  card_item = driver.find_elements(:id, ("lbl_task_name_").concat(expected_str))
  expect(card_item.length).to be > 0

  return expected_str
end

def delete_task_from_project(driver, task_index)
  pending = driver.find_element(:id, "lbl_pending_tasks").text.to_i

  # Open task details and click on delete task
  driver.find_element(:id, ("task_header_option_").concat(task_index)).click
  driver.find_element(:id, ("task_delete_").concat(task_index)).click
  sleep(1)
  driver.switch_to().alert().accept()
  sleep(1)

  # ASSERT: there is one less pending task
  expect(driver.find_element(:id, "lbl_pending_tasks").text).to eq ((pending - 1).to_s)

  # ASSERT: task item is not present
  task_item = @driver.find_elements(:id, ("task_header_").concat(task_index))
  expect(task_item.length).to eq(0)
end

def login(driver, email, password)
  driver.find_element(:id, "user_email").click
  driver.find_element(:id, "user_email").send_keys(email)
  driver.find_element(:id, "user_password").click
  driver.find_element(:id, "user_password").send_keys(password)
  @driver.find_element(:name, "commit").click
end
